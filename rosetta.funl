/*
 * 100 doors
 */
def hundred_doors_unoptimized =
  for i <- 1..100
    r = foldl1( (a, b) -> a xor b, map(a -> i % a == 0, 1..100) )
    println( i + ' ' + (if r then 'open' else 'closed') )

/*
 * A+B
 */
def a_plus_b = println( sum(map(int, readLine().split(' +'))) )

/*
 * Ackermann function
 */
def
  ackermann( 0, n ) = n + 1
  ackermann( m, 0 ) = ackermann( m - 1, 1 )
  ackermann( m, n ) = ackermann( m - 1, ackermann(m, n - 1) )

/*
 * Greatest element of a list
 * 
 * predefined as 'max( xs )' but can be explicitly implemented (only for lists) as:
 */
def
  maximum( xs ) =
    def
      max( a, b )             = if a <= b then b else a

      foldl( f, z, [] )       = z
      foldl( f, z, x:xs )     = foldl( f, f(z, x), xs )

      foldl1( f, x:xs )       = foldl( f, x, xs )
      foldl1( _, [] )         = error( "foldl1: empty list" )

    foldl1( max, xs )