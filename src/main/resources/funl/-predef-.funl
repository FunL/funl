/*     ______            __                                     *\
**    / ____/_  __ ___  / /     FunL Programming Language       **
**   / __/ / / / / __ \/ /      (c) 2014 Edward A. Maxedon, Sr. **
**  / /   / /_/ / / / / /__     http://funl-lang.org/           **
** /_/    \____/_/ /_/____/                                     **
\*                                                              */

native java.lang.{Class, System}
native scala.collection.mutable.StringBuilder
native scala.collection.immutable.WrappedString

function funl.modules.Predef.{
	println, print, printf, format, readLine,
	error, require, assert,
	array, seq, list, dict, set, tuple, vector,
	int, float, bin, oct, hex,
	rnd, eval
//	min
	}

native funl.modules.Predef.{
  chr, ord, isalpha, isupper, islower,
	sum, number
  }

native funl.modules.BitArray

val i =
	native funl.lia.ComplexDouble
	ComplexDouble( 0.0, 1.0 )
val j = i

native scala.Some
val None =
	native funl.modules.Predef.none
	none()

native scala.Tuple2

def
	fst( (a, _) ) = a

	snd( (_, b) ) = b

	head( x:_ )               = x
	head( [] )                = error( "head: empty list" )

	tail( _:xs )              = xs
	head( [] )                = error( "head: empty list" )
	
	map( f, [] )                = []
	map( f, inx@x:_::Stream )   = f( x ) # map( f, inx.tail() )
	map( f, x:xs )              = f( x ) : map( f, xs )
	map( f, (a::Array|a::Iterable) ) = map( f, list(a) )

	filter( p, [] )                       = []
	filter( p, inx@x:_::Stream	) | p( x )   = x # filter( p, inx.tail() )
	filter( p, x:xs	) | p( x )           = x : filter( p, xs )
	filter( p, _:xs	)                    = filter( p, xs )
	filter( p, (a::Array|a::Iterable) )        = filter( p, list(a) )

	foldl( f, z, [] )                 = z
	foldl( f, z, x:xs )               = foldl( f, f(z, x), xs )
	foldl( f, z, (a::Array|a::Iterable) )  = foldl( f, z, list(a) )
	foldl( f, z, it::Iterator )       =
		def iterfold( z ) =
			if it.hasNext()
				iterfold( f(z, it.next()) )
			else
				z

		iterfold( z )

	foldl1( f, x:xs )               = foldl( f, x, xs )
	foldl1( _, [] )                 = error( "foldl1: empty list" )
	foldl1( f, (a::Array|a::Seq) )  = foldl1( f, list(a) )
	foldl1( f, it::Iterator )
		| it.hasNext()                = foldl( f, it.next(), it )
		| otherwise                   = error( "foldl1: empty iterator" )

//	sum( l )									= foldl( (a, b) -> a + b, 0, l )
	product( l )							= foldl( (a, b) -> a*b, 1, l )

	max( a, b )							= if a <= b then b else a
	max( xs )								= foldl1( max, xs )

	maxBy( f, xs )           = foldl1( (a, b) -> if f(a) <= f(b) then b else a, xs )
	
	min( a, b )							= if a >= b then b else a
	min( xs )								= foldl1( min, xs )
