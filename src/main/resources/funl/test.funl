import util.sleep

val digits = array( [
	"   __",
	" /  /",
	"/__/ ",
	"     ",
	"    /",
	"   / ",
	"   __",
	"  __/",
	"/__  ",
	"   __",
	"  __/",
	" __/ ",
	"     ",
	" /__/",
	"   / ",
	"   __",
	" /__ ",
	" __/ ",
	"   __",
	" /__ ",
	"/__/ ",
	"   __",
	"    /",
	"   / ",
	"   __",
	" /__/",
	"/__/ ",
	"   __",
	" /__/",
	" __/ "
	] )
val colon = array( [
	"  ",
	" .",
	". "
	] )
val ROW = 10
val COL = 20

def displayTime() =
	def pad( n ) = if n < 10 then '0' + n else n

	t = $time
	s = (t + $timeZoneOffset)\1000%86400
	time = pad( s\3600 ) + ':' + pad( s%3600\60 ) + ':' + pad( s%60 )

	for row <- 0:3
		print( '\u001B[' + (ROW + row) + ';' + COL + 'H' )
		
		for ch <- time
			print( if ch == ':' then colon(row) else digits(int(ch)*3 + row) )

	t

print( '\u001B[2J\u001B[?25l' )

//for _ <- 1..5
while true
	sleep( 1000 - displayTime()%1000 )

//class javax.swing.JFrame
// 	f = JFrame()
// 	f.setSize( 200, 100 )
// 	f.setTitle( 'asdf' )
// 	f.setVisible( true )
// 	f.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE )

// 	cg
// 	start = time()
//
// 	for i <- 1..10000000 do 0
//
// 	println time() - start