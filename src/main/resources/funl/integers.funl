/*     ______            __                                      *\
**    / ____/_  __ ___  / /     FunL Programming Language        **
**   / __/ / / / / __ \/ /      (c) 2014, Edward A. Maxedon, Sr. **
**  / /   / /_/ / / / / /__     http://funl-lang.org/            **
** /_/    \____/_/ /_/____/                                      **
\*                                                               */

import math.{abs, sqrt}


def
	choose( n, k ) | k < 0 or k > n = 0
	choose( n, 0 ) = 1
	choose( n, n ) = 1
	choose( n, k ) = product( (n - i)/(i + 1) | i <- 0:min( k, n - k ) )

	even( n ) = 2|n

	odd( n ) = 2/|n

	B( n::Integer ) | n >= 0 = sum( 1/(k + 1)*sum((if 2|r then 1 else -1)*choose(k, r)*(r^n) | r <- 0..k) | k <- 0..n )

	factorial( n::Integer ) | n >= 0 = product( 1..n )

	F( n ) =
		def
			fib( 0, prev, _ )    = prev
			fib( 1, _,    next ) = next
			fib( n, prev, next ) = fib( n - 1, next, next + prev )

		fib( n, 0, 1 )

	gcd( 0, 0 ) = error( 'integers.gcd: gcd( 0, 0 ) is undefined' )
	gcd( a, b ) =
		def
			_gcd( a, 0 ) = a
			_gcd( a, b ) = _gcd( b, a%b )

		_gcd( abs(a), abs(b) )

	lcm( _, 0 ) =  0
	lcm( 0, _ ) =  0
	lcm( x, y ) =  abs( (x\gcd(x, y)) y )

	egcd( a, b ) =
		s, old_s = 0, 1
		t, old_t = 1, 0
		r, old_r = b, a

		while r != 0
			quotient = old_r\r
			old_r, r = r, old_r - quotient*r
			old_s, s = s, old_s - quotient*s
			old_t, t = t, old_t - quotient*t

		(old_r, old_s, old_t)

	isPrime( n ) =
		if n > 2 and 2|n then return false

		for d <- 3..int( sqrt(n) ) by 2
			if d|n then return false

		true
